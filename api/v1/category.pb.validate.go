// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/category.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Category with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Category) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Category with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryMultiError, or nil
// if none found.
func (m *Category) ValidateAll() error {
	return m.validate(true)
}

func (m *Category) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Desc

	if all {
		switch v := interface{}(m.GetCreateAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "CreateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "CreateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryValidationError{
				field:  "CreateAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "UpdateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "UpdateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryValidationError{
				field:  "UpdateAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CategoryMultiError(errors)
	}

	return nil
}

// CategoryMultiError is an error wrapping multiple validation errors returned
// by Category.ValidateAll() if the designated constraints aren't met.
type CategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryMultiError) AllErrors() []error { return m }

// CategoryValidationError is the validation error returned by
// Category.Validate if the designated constraints aren't met.
type CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryValidationError) ErrorName() string { return "CategoryValidationError" }

// Error satisfies the builtin error interface
func (e CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryValidationError{}

// Validate checks the field values on CategoryGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryGetRequestMultiError, or nil if none found.
func (m *CategoryGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CategoryGetRequestMultiError(errors)
	}

	return nil
}

// CategoryGetRequestMultiError is an error wrapping multiple validation errors
// returned by CategoryGetRequest.ValidateAll() if the designated constraints
// aren't met.
type CategoryGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryGetRequestMultiError) AllErrors() []error { return m }

// CategoryGetRequestValidationError is the validation error returned by
// CategoryGetRequest.Validate if the designated constraints aren't met.
type CategoryGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryGetRequestValidationError) ErrorName() string {
	return "CategoryGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryGetRequestValidationError{}

// Validate checks the field values on CategoryGetReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CategoryGetReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryGetReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryGetReplyMultiError, or nil if none found.
func (m *CategoryGetReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryGetReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryGetReplyValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryGetReplyValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryGetReplyValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CategoryGetReplyMultiError(errors)
	}

	return nil
}

// CategoryGetReplyMultiError is an error wrapping multiple validation errors
// returned by CategoryGetReply.ValidateAll() if the designated constraints
// aren't met.
type CategoryGetReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryGetReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryGetReplyMultiError) AllErrors() []error { return m }

// CategoryGetReplyValidationError is the validation error returned by
// CategoryGetReply.Validate if the designated constraints aren't met.
type CategoryGetReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryGetReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryGetReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryGetReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryGetReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryGetReplyValidationError) ErrorName() string { return "CategoryGetReplyValidationError" }

// Error satisfies the builtin error interface
func (e CategoryGetReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryGetReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryGetReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryGetReplyValidationError{}

// Validate checks the field values on CategoryCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryCreateRequestMultiError, or nil if none found.
func (m *CategoryCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Desc

	if len(errors) > 0 {
		return CategoryCreateRequestMultiError(errors)
	}

	return nil
}

// CategoryCreateRequestMultiError is an error wrapping multiple validation
// errors returned by CategoryCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoryCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryCreateRequestMultiError) AllErrors() []error { return m }

// CategoryCreateRequestValidationError is the validation error returned by
// CategoryCreateRequest.Validate if the designated constraints aren't met.
type CategoryCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryCreateRequestValidationError) ErrorName() string {
	return "CategoryCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryCreateRequestValidationError{}

// Validate checks the field values on CategoryCreateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryCreateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryCreateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryCreateReplyMultiError, or nil if none found.
func (m *CategoryCreateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryCreateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CategoryCreateReplyMultiError(errors)
	}

	return nil
}

// CategoryCreateReplyMultiError is an error wrapping multiple validation
// errors returned by CategoryCreateReply.ValidateAll() if the designated
// constraints aren't met.
type CategoryCreateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryCreateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryCreateReplyMultiError) AllErrors() []error { return m }

// CategoryCreateReplyValidationError is the validation error returned by
// CategoryCreateReply.Validate if the designated constraints aren't met.
type CategoryCreateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryCreateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryCreateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryCreateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryCreateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryCreateReplyValidationError) ErrorName() string {
	return "CategoryCreateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryCreateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryCreateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryCreateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryCreateReplyValidationError{}

// Validate checks the field values on CategoryDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryDeleteRequestMultiError, or nil if none found.
func (m *CategoryDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CategoryDeleteRequestMultiError(errors)
	}

	return nil
}

// CategoryDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by CategoryDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoryDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryDeleteRequestMultiError) AllErrors() []error { return m }

// CategoryDeleteRequestValidationError is the validation error returned by
// CategoryDeleteRequest.Validate if the designated constraints aren't met.
type CategoryDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryDeleteRequestValidationError) ErrorName() string {
	return "CategoryDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryDeleteRequestValidationError{}

// Validate checks the field values on CategoryDeleteReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryDeleteReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryDeleteReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryDeleteReplyMultiError, or nil if none found.
func (m *CategoryDeleteReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryDeleteReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CategoryDeleteReplyMultiError(errors)
	}

	return nil
}

// CategoryDeleteReplyMultiError is an error wrapping multiple validation
// errors returned by CategoryDeleteReply.ValidateAll() if the designated
// constraints aren't met.
type CategoryDeleteReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryDeleteReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryDeleteReplyMultiError) AllErrors() []error { return m }

// CategoryDeleteReplyValidationError is the validation error returned by
// CategoryDeleteReply.Validate if the designated constraints aren't met.
type CategoryDeleteReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryDeleteReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryDeleteReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryDeleteReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryDeleteReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryDeleteReplyValidationError) ErrorName() string {
	return "CategoryDeleteReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryDeleteReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryDeleteReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryDeleteReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryDeleteReplyValidationError{}

// Validate checks the field values on CategoryUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryUpdateRequestMultiError, or nil if none found.
func (m *CategoryUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Desc

	if len(errors) > 0 {
		return CategoryUpdateRequestMultiError(errors)
	}

	return nil
}

// CategoryUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by CategoryUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoryUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryUpdateRequestMultiError) AllErrors() []error { return m }

// CategoryUpdateRequestValidationError is the validation error returned by
// CategoryUpdateRequest.Validate if the designated constraints aren't met.
type CategoryUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryUpdateRequestValidationError) ErrorName() string {
	return "CategoryUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryUpdateRequestValidationError{}

// Validate checks the field values on CategoryUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryUpdateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryUpdateReplyMultiError, or nil if none found.
func (m *CategoryUpdateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryUpdateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CategoryUpdateReplyMultiError(errors)
	}

	return nil
}

// CategoryUpdateReplyMultiError is an error wrapping multiple validation
// errors returned by CategoryUpdateReply.ValidateAll() if the designated
// constraints aren't met.
type CategoryUpdateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryUpdateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryUpdateReplyMultiError) AllErrors() []error { return m }

// CategoryUpdateReplyValidationError is the validation error returned by
// CategoryUpdateReply.Validate if the designated constraints aren't met.
type CategoryUpdateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryUpdateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryUpdateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryUpdateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryUpdateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryUpdateReplyValidationError) ErrorName() string {
	return "CategoryUpdateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryUpdateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryUpdateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryUpdateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryUpdateReplyValidationError{}

// Validate checks the field values on CategoryListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryListRequestMultiError, or nil if none found.
func (m *CategoryListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryListRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryListRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CategoryListRequestMultiError(errors)
	}

	return nil
}

// CategoryListRequestMultiError is an error wrapping multiple validation
// errors returned by CategoryListRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoryListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryListRequestMultiError) AllErrors() []error { return m }

// CategoryListRequestValidationError is the validation error returned by
// CategoryListRequest.Validate if the designated constraints aren't met.
type CategoryListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryListRequestValidationError) ErrorName() string {
	return "CategoryListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryListRequestValidationError{}

// Validate checks the field values on CategoryListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CategoryListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryListReplyMultiError, or nil if none found.
func (m *CategoryListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoryListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoryListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryListReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoryListReplyMultiError(errors)
	}

	return nil
}

// CategoryListReplyMultiError is an error wrapping multiple validation errors
// returned by CategoryListReply.ValidateAll() if the designated constraints
// aren't met.
type CategoryListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryListReplyMultiError) AllErrors() []error { return m }

// CategoryListReplyValidationError is the validation error returned by
// CategoryListReply.Validate if the designated constraints aren't met.
type CategoryListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryListReplyValidationError) ErrorName() string {
	return "CategoryListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryListReplyValidationError{}

// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.19.5
// source: api/v1/category.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCategoryCreate = "/load_book.v1.Category/Create"
const OperationCategoryDelete = "/load_book.v1.Category/Delete"
const OperationCategoryGet = "/load_book.v1.Category/Get"
const OperationCategoryList = "/load_book.v1.Category/List"
const OperationCategoryUpdate = "/load_book.v1.Category/Update"

type CategoryHTTPServer interface {
	Create(context.Context, *CategoryCreateRequest) (*CategoryCreateReply, error)
	Delete(context.Context, *CategoryDeleteRequest) (*CategoryDeleteReply, error)
	Get(context.Context, *CategoryGetRequest) (*CategoryGetReply, error)
	List(context.Context, *CategoryListRequest) (*CategoryListReply, error)
	Update(context.Context, *CategoryUpdateRequest) (*CategoryUpdateReply, error)
}

func RegisterCategoryHTTPServer(s *http.Server, srv CategoryHTTPServer) {
	r := s.Route("/")
	r.GET("/category/get-by-id", _Category_Get0_HTTP_Handler(srv))
	r.GET("/category", _Category_List0_HTTP_Handler(srv))
	r.PUT("/category", _Category_Update0_HTTP_Handler(srv))
	r.DELETE("/category", _Category_Delete0_HTTP_Handler(srv))
	r.POST("/category", _Category_Create0_HTTP_Handler(srv))
}

func _Category_Get0_HTTP_Handler(srv CategoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CategoryGetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCategoryGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*CategoryGetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CategoryGetReply)
		return ctx.Result(200, reply)
	}
}

func _Category_List0_HTTP_Handler(srv CategoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CategoryListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCategoryList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*CategoryListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CategoryListReply)
		return ctx.Result(200, reply)
	}
}

func _Category_Update0_HTTP_Handler(srv CategoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CategoryUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCategoryUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*CategoryUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CategoryUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _Category_Delete0_HTTP_Handler(srv CategoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CategoryDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCategoryDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*CategoryDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CategoryDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _Category_Create0_HTTP_Handler(srv CategoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CategoryCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCategoryCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*CategoryCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CategoryCreateReply)
		return ctx.Result(200, reply)
	}
}

type CategoryHTTPClient interface {
	Create(ctx context.Context, req *CategoryCreateRequest, opts ...http.CallOption) (rsp *CategoryCreateReply, err error)
	Delete(ctx context.Context, req *CategoryDeleteRequest, opts ...http.CallOption) (rsp *CategoryDeleteReply, err error)
	Get(ctx context.Context, req *CategoryGetRequest, opts ...http.CallOption) (rsp *CategoryGetReply, err error)
	List(ctx context.Context, req *CategoryListRequest, opts ...http.CallOption) (rsp *CategoryListReply, err error)
	Update(ctx context.Context, req *CategoryUpdateRequest, opts ...http.CallOption) (rsp *CategoryUpdateReply, err error)
}

type CategoryHTTPClientImpl struct {
	cc *http.Client
}

func NewCategoryHTTPClient(client *http.Client) CategoryHTTPClient {
	return &CategoryHTTPClientImpl{client}
}

func (c *CategoryHTTPClientImpl) Create(ctx context.Context, in *CategoryCreateRequest, opts ...http.CallOption) (*CategoryCreateReply, error) {
	var out CategoryCreateReply
	pattern := "/category"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCategoryCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CategoryHTTPClientImpl) Delete(ctx context.Context, in *CategoryDeleteRequest, opts ...http.CallOption) (*CategoryDeleteReply, error) {
	var out CategoryDeleteReply
	pattern := "/category"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCategoryDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CategoryHTTPClientImpl) Get(ctx context.Context, in *CategoryGetRequest, opts ...http.CallOption) (*CategoryGetReply, error) {
	var out CategoryGetReply
	pattern := "/category/get-by-id"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCategoryGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CategoryHTTPClientImpl) List(ctx context.Context, in *CategoryListRequest, opts ...http.CallOption) (*CategoryListReply, error) {
	var out CategoryListReply
	pattern := "/category"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCategoryList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CategoryHTTPClientImpl) Update(ctx context.Context, in *CategoryUpdateRequest, opts ...http.CallOption) (*CategoryUpdateReply, error) {
	var out CategoryUpdateReply
	pattern := "/category"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCategoryUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"load-book/internal/conf"
	"load-book/internal/data"
	"load-book/internal/server"
	biz2 "load-book/internal/service/category/biz"
	data3 "load-book/internal/service/category/data"
	service2 "load-book/internal/service/category/service"
	"load-book/internal/service/health/biz"
	data2 "load-book/internal/service/health/data"
	"load-book/internal/service/health/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

func wireApp(bootstrap *conf.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(bootstrap, logger)
	if err != nil {
		return nil, nil, err
	}
	healthData := data2.NewRepo(dataData, logger)
	useCase := biz.NewUseCase(healthData, logger)
	healthServer := service.NewService(useCase)
	categoryData := data3.NewRepo(dataData, logger)
	bizUseCase := biz2.NewUseCase(categoryData, logger)
	categoryServer := service2.NewService(bizUseCase)
	pbServer := &server.PbServer{
		Hs: healthServer,
		Cs: categoryServer,
	}
	grpcServer := server.NewGRPCServer(bootstrap, pbServer, logger)
	httpServer := server.NewHTTPServer(bootstrap, pbServer, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
